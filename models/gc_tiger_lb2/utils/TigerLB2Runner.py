"""
------------------------------------------------
Mhub / DIAG - Run Module for Tiger LB2 Algorithm
------------------------------------------------

------------------------------------------------
Author: Sil van de Leemput
Email:  sil.vandeleemput@radboudumc.nl
------------------------------------------------
"""
from mhubio.core import Instance, InstanceData, IO, Module, ValueOutput, Meta, DataType, FileType

from pathlib import Path
import json


@ValueOutput.Name('til_score')
@ValueOutput.Meta(Meta(scale="percent", min=0, max=100))
@ValueOutput.Label('TIL score')
@ValueOutput.Type(int)
@ValueOutput.Description('percentage of stromal area covered by tumour infiltrating lymphocytes. Values between 0 (percent) to 100 (percent).')
class TilScoreOutput(ValueOutput):
    pass


class TigerLB2Runner(Module):

    CLI_SCRIPT_PATH = Path(__file__).parent / "cli.py"

    @IO.Instance()
    @IO.Input('in_data', 'tiff:mod=sm', the='input whole slide image Tiff')
    @IO.Output('out_data', 'gc_tiger_lb2_til_score.json', 'json:model=TigerLB2TIL', 'in_data', the='TIGER LB2 TIL score')
    @IO.Output('out_segmentation', 'gc_tiger_lb2_segmentation.mha', 'mha:mod=seg:model=TigerLB2TIL', 'in_data', the='Raw initial TIGER LB2 segmentation map for the input WSI image. The labels are: 1-Tumor, 2-Stroma, 3-Rest.')
    @IO.OutputData('til_score', TilScoreOutput, data='in_data', the='TIGER LB2 TIL score - percentage of stromal area covered by tumour infiltrating lymphocytes. Values between 0-100 (percent).')
    def task(self, instance: Instance, in_data: InstanceData, out_data: InstanceData, out_segmentation: InstanceData, til_score: TilScoreOutput) -> None:
        # Execute the Tiger LB2 Algorithm through a Python subprocess and associated pipenv environment
        self.subprocess(
            [
                "pipenv",
                "run",
                "python",
                str(self.CLI_SCRIPT_PATH),
                in_data.abspath,
                out_data.abspath,
                out_segmentation.abspath,
            ]
        )

        # Validate that the required output file(s) were generated by the subprocess
        for expected_file_path in (out_data.abspath, out_segmentation.abspath):
            if not Path(expected_file_path).is_file():
                raise FileNotFoundError(
                    f"Couldn't find expected output file: `{expected_file_path}`. "
                    f"The subprocess `{self.CLI_SCRIPT_PATH}` did not generate the required output file."
                )

        # export output til score as data as well
        with open(out_data.abspath, "r") as f:
            til_score.value = json.load(f)
        assert isinstance(til_score.value, int)
